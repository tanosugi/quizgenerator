"use client";

import { useTranslationClient } from "@/i18n/client";
import Center from "@/layout/center";
import { Attempt, QuizSet } from "@/models";
import {
  QuizResultView,
  ResultForQuizRankingHeaderView,
  ResultForQuizSetViewCollection,
} from "@/ui-components";
import { DataStore, SortDirection } from "aws-amplify";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

export default function QuizResult({
  params: { lng, attemptId },
}: {
  params: {
    lng: string;
    attemptId: string;
  };
}) {
  const router = useRouter();
  const { t } = useTranslationClient(lng);
  const [attemptThisTime, setAttemptThisTime] = useState<Attempt>();
  const [attemptForSameQuizSet, setAttemptForSameQuizSet] = useState<Attempt[]>();
  const [quizSet, setQuizSet] = useState<QuizSet>();
  const fetchAttemptThisTime = async () => {
    const resp = await DataStore.query(Attempt, (c) => c.id.eq(attemptId));
    setAttemptThisTime(resp[0]);
  };
  const fetchAttemptForSameQuizSet = async () => {
    const resp = await DataStore.query(
      Attempt,
      (c) => c.quizsetID.eq(attemptThisTime?.quizsetID || ""),
      {
        sort: (s) =>
          s.numberOfCorrectAnswer(SortDirection.DESCENDING).time(SortDirection.ASCENDING),
      }
    );
    setAttemptForSameQuizSet(resp);
  };
  const fetchQuizSet = async () => {
    const resp = await DataStore.query(QuizSet, (c) => c.id.eq(attemptThisTime?.quizsetID || ""));
    setQuizSet(resp[0]);
  };
  useEffect(() => {
    fetchAttemptThisTime();
  }, []);
  useEffect(() => {
    fetchQuizSet();
    fetchAttemptForSameQuizSet();
  }, [attemptThisTime]);
  return (
    <>
      <Center>
        <QuizResultView
          overrides={{
            "subject-and-level": { children: `${quizSet?.subject} for ${quizSet?.level}` },
            "correct-answers": {
              children: `${attemptThisTime?.numberOfCorrectAnswer} / ${quizSet?.numberOfQuiz}`,
            },
            time: { children: `${attemptThisTime?.time} ${t("sec")}` },
            problems3851296: { children: t("Result") },
            problems3851285: { children: t("Share") },
            problems3851291: { children: t("copy url") },
            twitter: {
              onClick: () =>
                window.open(
                  "https://twitter.com/intent/tweet?text=" +
                    t("I solved the quizzes generated by AI.  ") +
                    window.location.href
                ),
            },
            "Frame 5": {
              onClick: () => {
                navigator.clipboard.writeText(window.location.href);
              },
            },
            "Generate Another Quiz": {
              children: t("Generate Another Quiz"),
              onClick: () => {
                router.push(`/${lng}/quiz-generate`);
              },
            },
            "Try Again": {
              children: t("Try Again"),
              onClick: () => {
                router.push(`/${lng}/quiz-solve/${quizSet?.id}`);
              },
            },
          }}
        />
      </Center>
      <Center>
        <ResultForQuizRankingHeaderView
          overrides={{
            rank: { children: t("rank") },
            accuracy: { children: t("accuracy") },
            time: { children: t("time") },
            "user name": { children: t("user name") },
          }}
        />
        <ResultForQuizSetViewCollection
          items={attemptForSameQuizSet}
          overrideItems={({ item, index }) => ({
            overrides: { ranking: { children: index + 1 } },
          })}
        />
      </Center>
    </>
  );
}
